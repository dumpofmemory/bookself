type AggregateBook {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Book {
  id: ID!
  authors: String
  description: String
  publishedDate: String
  title: String
  ownedBy: User
}

type BookConnection {
  pageInfo: PageInfo!
  edges: [BookEdge]!
  aggregate: AggregateBook!
}

input BookCreateInput {
  id: ID
  authors: String
  description: String
  publishedDate: String
  title: String
  ownedBy: UserCreateOneWithoutBooksInput
}

input BookCreateManyWithoutOwnedByInput {
  create: [BookCreateWithoutOwnedByInput!]
  connect: [BookWhereUniqueInput!]
}

input BookCreateWithoutOwnedByInput {
  id: ID
  authors: String
  description: String
  publishedDate: String
  title: String
}

type BookEdge {
  node: Book!
  cursor: String!
}

enum BookOrderByInput {
  id_ASC
  id_DESC
  authors_ASC
  authors_DESC
  description_ASC
  description_DESC
  publishedDate_ASC
  publishedDate_DESC
  title_ASC
  title_DESC
}

type BookPreviousValues {
  id: ID!
  authors: String
  description: String
  publishedDate: String
  title: String
}

input BookScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  authors: String
  authors_not: String
  authors_in: [String!]
  authors_not_in: [String!]
  authors_lt: String
  authors_lte: String
  authors_gt: String
  authors_gte: String
  authors_contains: String
  authors_not_contains: String
  authors_starts_with: String
  authors_not_starts_with: String
  authors_ends_with: String
  authors_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  publishedDate: String
  publishedDate_not: String
  publishedDate_in: [String!]
  publishedDate_not_in: [String!]
  publishedDate_lt: String
  publishedDate_lte: String
  publishedDate_gt: String
  publishedDate_gte: String
  publishedDate_contains: String
  publishedDate_not_contains: String
  publishedDate_starts_with: String
  publishedDate_not_starts_with: String
  publishedDate_ends_with: String
  publishedDate_not_ends_with: String
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  AND: [BookScalarWhereInput!]
  OR: [BookScalarWhereInput!]
  NOT: [BookScalarWhereInput!]
}

type BookSubscriptionPayload {
  mutation: MutationType!
  node: Book
  updatedFields: [String!]
  previousValues: BookPreviousValues
}

input BookSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BookWhereInput
  AND: [BookSubscriptionWhereInput!]
  OR: [BookSubscriptionWhereInput!]
  NOT: [BookSubscriptionWhereInput!]
}

input BookUpdateInput {
  authors: String
  description: String
  publishedDate: String
  title: String
  ownedBy: UserUpdateOneWithoutBooksInput
}

input BookUpdateManyDataInput {
  authors: String
  description: String
  publishedDate: String
  title: String
}

input BookUpdateManyMutationInput {
  authors: String
  description: String
  publishedDate: String
  title: String
}

input BookUpdateManyWithoutOwnedByInput {
  create: [BookCreateWithoutOwnedByInput!]
  delete: [BookWhereUniqueInput!]
  connect: [BookWhereUniqueInput!]
  set: [BookWhereUniqueInput!]
  disconnect: [BookWhereUniqueInput!]
  update: [BookUpdateWithWhereUniqueWithoutOwnedByInput!]
  upsert: [BookUpsertWithWhereUniqueWithoutOwnedByInput!]
  deleteMany: [BookScalarWhereInput!]
  updateMany: [BookUpdateManyWithWhereNestedInput!]
}

input BookUpdateManyWithWhereNestedInput {
  where: BookScalarWhereInput!
  data: BookUpdateManyDataInput!
}

input BookUpdateWithoutOwnedByDataInput {
  authors: String
  description: String
  publishedDate: String
  title: String
}

input BookUpdateWithWhereUniqueWithoutOwnedByInput {
  where: BookWhereUniqueInput!
  data: BookUpdateWithoutOwnedByDataInput!
}

input BookUpsertWithWhereUniqueWithoutOwnedByInput {
  where: BookWhereUniqueInput!
  update: BookUpdateWithoutOwnedByDataInput!
  create: BookCreateWithoutOwnedByInput!
}

input BookWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  authors: String
  authors_not: String
  authors_in: [String!]
  authors_not_in: [String!]
  authors_lt: String
  authors_lte: String
  authors_gt: String
  authors_gte: String
  authors_contains: String
  authors_not_contains: String
  authors_starts_with: String
  authors_not_starts_with: String
  authors_ends_with: String
  authors_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  publishedDate: String
  publishedDate_not: String
  publishedDate_in: [String!]
  publishedDate_not_in: [String!]
  publishedDate_lt: String
  publishedDate_lte: String
  publishedDate_gt: String
  publishedDate_gte: String
  publishedDate_contains: String
  publishedDate_not_contains: String
  publishedDate_starts_with: String
  publishedDate_not_starts_with: String
  publishedDate_ends_with: String
  publishedDate_not_ends_with: String
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  ownedBy: UserWhereInput
  AND: [BookWhereInput!]
  OR: [BookWhereInput!]
  NOT: [BookWhereInput!]
}

input BookWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createBook(data: BookCreateInput!): Book!
  updateBook(data: BookUpdateInput!, where: BookWhereUniqueInput!): Book
  updateManyBooks(data: BookUpdateManyMutationInput!, where: BookWhereInput): BatchPayload!
  upsertBook(where: BookWhereUniqueInput!, create: BookCreateInput!, update: BookUpdateInput!): Book!
  deleteBook(where: BookWhereUniqueInput!): Book
  deleteManyBooks(where: BookWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  book(where: BookWhereUniqueInput!): Book
  books(where: BookWhereInput, orderBy: BookOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Book]!
  booksConnection(where: BookWhereInput, orderBy: BookOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BookConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  book(where: BookSubscriptionWhereInput): BookSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  uid: String!
  name: String
  email: String
  photoURL: String
  isNewUser: Boolean
  books(where: BookWhereInput, orderBy: BookOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Book!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  uid: String!
  name: String
  email: String
  photoURL: String
  isNewUser: Boolean
  books: BookCreateManyWithoutOwnedByInput
}

input UserCreateOneWithoutBooksInput {
  create: UserCreateWithoutBooksInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutBooksInput {
  id: ID
  uid: String!
  name: String
  email: String
  photoURL: String
  isNewUser: Boolean
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  uid_ASC
  uid_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  photoURL_ASC
  photoURL_DESC
  isNewUser_ASC
  isNewUser_DESC
}

type UserPreviousValues {
  id: ID!
  uid: String!
  name: String
  email: String
  photoURL: String
  isNewUser: Boolean
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  uid: String
  name: String
  email: String
  photoURL: String
  isNewUser: Boolean
  books: BookUpdateManyWithoutOwnedByInput
}

input UserUpdateManyMutationInput {
  uid: String
  name: String
  email: String
  photoURL: String
  isNewUser: Boolean
}

input UserUpdateOneWithoutBooksInput {
  create: UserCreateWithoutBooksInput
  update: UserUpdateWithoutBooksDataInput
  upsert: UserUpsertWithoutBooksInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutBooksDataInput {
  uid: String
  name: String
  email: String
  photoURL: String
  isNewUser: Boolean
}

input UserUpsertWithoutBooksInput {
  update: UserUpdateWithoutBooksDataInput!
  create: UserCreateWithoutBooksInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  uid: String
  uid_not: String
  uid_in: [String!]
  uid_not_in: [String!]
  uid_lt: String
  uid_lte: String
  uid_gt: String
  uid_gte: String
  uid_contains: String
  uid_not_contains: String
  uid_starts_with: String
  uid_not_starts_with: String
  uid_ends_with: String
  uid_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  photoURL: String
  photoURL_not: String
  photoURL_in: [String!]
  photoURL_not_in: [String!]
  photoURL_lt: String
  photoURL_lte: String
  photoURL_gt: String
  photoURL_gte: String
  photoURL_contains: String
  photoURL_not_contains: String
  photoURL_starts_with: String
  photoURL_not_starts_with: String
  photoURL_ends_with: String
  photoURL_not_ends_with: String
  isNewUser: Boolean
  isNewUser_not: Boolean
  books_every: BookWhereInput
  books_some: BookWhereInput
  books_none: BookWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  uid: String
}
